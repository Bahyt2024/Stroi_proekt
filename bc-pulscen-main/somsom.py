import os
import re
import json
import asyncio
import logging
import time
import threading
import webbrowser
import pyautogui
from datetime import datetime
from fastapi import FastAPI, HTTPException
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError
from openai import AsyncOpenAI

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import (
    OPENAI_API_KEY, BROWSER_USER_AGENT, BROWSER_VIEWPORT, BROWSER_ARGS,
    PAGE_TIMEOUT, SELLER_PAGE_TIMEOUT, PRODUCT_PAGE_TIMEOUT, MAX_PAGES
)
from models import ProductQuery, pulscen_get_subdomain
from utils import (
    extract_phone_number, extract_dates_from_main_page, get_current_date,
    get_current_year_quarter
)
from ai_services import (
    perplexity_search_product_cards, gpt_check_product_match,
    extract_text_from_image, gpt_extract_data_from_screenshot
)
from company_extractor import extract_company_data
from pdf_generator import create_pdf_with_fpdf
import aiohttp

def auto_screenshot_system():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    """
    try:
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        time.sleep(3)
        
        # URL —Å–∞–π—Ç–∞
        url = "http://localhost:8000"
        
        print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {url}")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        webbrowser.open(url)
        
        # –ñ–¥–µ–º 8 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã —Å–∞–π—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ...")
        time.sleep(8)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        print("üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        screenshots_dir = "system_screenshots"
        if not os.path.exists(screenshots_dir):
            os.makedirs(screenshots_dir)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_filename = f"{screenshots_dir}/fullscreen_screenshot_{timestamp}.png"
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        screenshot = pyautogui.screenshot()
        screenshot.save(screenshot_filename)
        
        print(f"‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot_filename}")
        print(f"üïê –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {screenshot.size}")
        print(f"üñ•Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: {pyautogui.size()}")
        
        return screenshot_filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
async def validate_url(url: str, timeout: int = 15, retries: int = 3) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    }
    
    for attempt in range(retries):
        try:
            connector = aiohttp.TCPConnector(ssl=False)  # –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É
            timeout_config = aiohttp.ClientTimeout(total=timeout, connect=5)
            
            async with aiohttp.ClientSession(connector=connector, timeout=timeout_config, headers=headers) as session:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å
                try:
                    async with session.head(url, allow_redirects=True) as response:
                        if 200 <= response.status < 400:
                            logger.info(f"[URL-VALID] ‚úÖ HEAD {url} ‚Üí {response.status}")
                            return True
                        else:
                            logger.warning(f"[URL-INVALID] HEAD {url} ‚Üí {response.status}")
                except:
                    # –ï—Å–ª–∏ HEAD –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º GET
                    async with session.get(url, allow_redirects=True) as response:
                        if 200 <= response.status < 400:
                            logger.info(f"[URL-VALID] ‚úÖ GET {url} ‚Üí {response.status}")
                            return True
                        else:
                            logger.warning(f"[URL-INVALID] GET {url} ‚Üí {response.status}")
                            
        except Exception as e:
            error_msg = str(e)
            logger.warning(f"[URL-VALIDATION] Attempt {attempt + 1}/{retries} failed for {url}: {error_msg}")
            
            # –ë—ã—Å—Ç—Ä–æ –æ—Ç–∫–ª–æ–Ω—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—à–∏–±–∫–∏
            if any(err in error_msg for err in [
                "Name or service not known", 
                "Connection refused", 
                "SSL",
                "certificate",
                "timeout"
            ]):
                logger.warning(f"[URL-INVALID] ‚ùå Quick reject {url}: {error_msg}")
                return False
                
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            if attempt < retries - 1:
                await asyncio.sleep(1)
    
    logger.warning(f"[URL-INVALID] ‚ùå All {retries} attempts failed for {url}")
    return False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('server.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª–∏
app = FastAPI(
    title="Pulscen Parser API",
    description="API –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å pulscen.ru",
    version="1.0.0"
)

@app.get("/screenshot")
async def take_system_screenshot():
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        screenshots_dir = "system_screenshots"
        if not os.path.exists(screenshots_dir):
            os.makedirs(screenshots_dir)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        screenshot_filename = f"{screenshots_dir}/manual_fullscreen_{timestamp}.png"
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        screenshot = pyautogui.screenshot()
        screenshot.save(screenshot_filename)
        
        return {
            "success": True,
            "message": "–°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
            "filename": screenshot_filename,
            "timestamp": datetime.now().isoformat(),
            "size": f"{screenshot.size[0]}x{screenshot.size[1]}",
            "screen_resolution": f"{pyautogui.size()[0]}x{pyautogui.size()[1]}"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª–∏
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware

# CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Trusted Host –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç Host header –∞—Ç–∞–∫
app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["*"]  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ö–æ—Å—Ç—ã
)

print("FastAPI app created successfully!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

@app.post("/test")
async def test_endpoint():
    return {"status": "ok", "message": "Server is working"}

@app.post("/debug_collect")
async def debug_collect_offers(data: dict):
    print("DEBUG_COLLECT CALLED!")
    logger.info(f"DEBUG: Received data: {data}")
    try:
        return {"status": "received", "data": data}
    except Exception as e:
        logger.error(f"DEBUG ERROR: {str(e)}")
        return {"error": str(e)}

@app.get("/health")
async def health_check():
    return {"status": "OK", "message": "Server is running"}

@app.post("/simple_test")
async def simple_test():
    print("SIMPLE_TEST CALLED!")
    return {"message": "Simple test works"}

@app.post("/validate_test")
async def validate_test(query: ProductQuery):
    print("VALIDATE_TEST CALLED!")
    print(f"Received query: {query}")
    return {"message": "Validation works", "data": query.model_dump()}

@app.post("/collect_offers")
async def collect_offers(query: ProductQuery):
    print("=" * 50)
    print("COLLECT_OFFERS CALLED!")
    print(f"Received query: {query}")
    print("=" * 50)
    logger.info("COLLECT_OFFERS FUNCTION STARTED")
    
    try:
        logger.info(f"Starting collect_offers with query: {query}")
        name, code, weight, number, city, monitor = query.name, query.code, query.weight, query.number, query.city, query.monitor
        # number - —ç—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø/–ø –≤ —Ç–∞–±–ª–∏—Ü–µ, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–∞—Ä—Å–∏–º 3 –∫–∞—Ä—Ç–æ—á–∫–∏
        cards_to_parse = 3
        logger.info(f"Extracted variables: name={name}, code={code}, weight={weight}, number={number} (start row), city={city}, monitor={monitor}")
        try:
            int_number = int(number)
            logger.info(f"DEBUG: number type={type(number)}, number value='{number}', int(number)={int_number}")
        except (ValueError, TypeError) as e:
            logger.error(f"DEBUG: Invalid number '{number}': {e}")
            int_number = 1

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ –¥–ª—è output
        safe_code = str(code).strip() if str(code).strip() else "unknown_code"
        safe_name = str(query.name).strip() if str(query.name).strip() else "unknown_name"
        safe_code = re.sub(r'[^\w\-]', '_', safe_code)
        safe_name = re.sub(r'[^\w\-]', '_', safe_name)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è safe_name)
        if len(safe_name) > 100:
            safe_name = safe_name[:100]
        
        out_dir = f"output/{safe_code}_{safe_name}"
        os.makedirs(out_dir, exist_ok=True)
        logger.info(f"Created output directory: {out_dir}")

        logger.info("Starting Playwright...")
        print("About to start Playwright...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Playwright –±—Ä–∞—É–∑–µ—Ä–æ–≤
        try:
            from playwright.async_api import async_playwright
            logger.info("Playwright imported successfully")
        except ImportError as e:
            logger.error(f"Playwright import failed: {e}")
            raise HTTPException(status_code=500, detail="Playwright not installed")
        
        async with async_playwright() as p:
            print("Playwright started, launching browser...")
            browser = await p.chromium.launch(
                headless=True,
                args=BROWSER_ARGS
            )
            print("Browser launched successfully!")
            context = await browser.new_context(
                user_agent=BROWSER_USER_AGENT,
                viewport=BROWSER_VIEWPORT
            )

            try:
                page = await context.new_page()

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥–¥–æ–º–µ–Ω–æ–º
                subdomain = pulscen_get_subdomain(query.city)
                if subdomain:
                    search_url = f"https://{subdomain}.pulscen.ru/search/price?q={query.name.replace(' ', '+')}"
                else:
                    search_url = f"https://pulscen.ru/search/price?q={query.name.replace(' ', '+')}"
                await page.goto(search_url, timeout=PAGE_TIMEOUT)

                elements = await page.query_selector_all("a.product-listing__product-name")
                if not elements:
                    raise HTTPException(status_code=404, detail="–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Pulscen
                found_count = 0
                page_num = 1
                found_companies = []
                yes_company_names, yes_links, yes_product_names, yes_prices, yes_currencies, yes_addresses, yes_phones = [], [], [], [], [], [], []
                stop_search = False
                
                while found_count < cards_to_parse and page_num <= MAX_PAGES and not stop_search:
                    product_articles = await page.query_selector_all('article.product-listing__item-wrapper')
                    logger.info(f"[PULSCEN] –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}, –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(product_articles)}")
                    
                    for article in product_articles:
                        if found_count >= cards_to_parse:
                            stop_search = True
                            break
                        try:
                            product_name_elem = await article.query_selector('a.product-listing__product-name')
                            product_name = await product_name_elem.text_content() if product_name_elem else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                            href = await product_name_elem.get_attribute("href") if product_name_elem else ""
                            full_link = f"https://www.pulscen.ru{href}" if href and not href.startswith("http") else href
                            
                            company_elem = await article.query_selector('span.product-listing__company-name-wrapper')
                            company_name_raw = await company_elem.text_content() if company_elem else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                            company_name = company_name_raw.replace('\n', ' ').strip()
                            if "–≥." in company_name:
                                company_name = company_name.split("–≥.")[0].strip()
                            
                            price_elem = await article.query_selector('i[data-price-type="discount-new"]')
                            if not price_elem:
                                price_elem = await article.query_selector('i[data-price-type="exact"]')
                            if not price_elem:
                                price_from_elem = await article.query_selector('span[data-price-type="from"]')
                                price_to_elem = await article.query_selector('span[data-price-type="to"]')
                                if price_from_elem and price_to_elem:
                                    price_from = await price_from_elem.text_content()
                                    price_to = await price_to_elem.text_content()
                                    price = f"–æ—Ç {price_from} –¥–æ {price_to}"
                                elif price_from_elem:
                                    price = f"–æ—Ç {await price_from_elem.text_content()}"
                                else:
                                    price = ""
                            else:
                                price = await price_elem.text_content()

                            if not price:
                                logger.info(f"[FILTER] –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç —Ü–µ–Ω—ã —É '{product_name}'")
                                continue
                            
                            currency_elem = await article.query_selector('span.price-currency')
                            currency = await currency_elem.text_content() if currency_elem else "—Ä—É–±."
                            address_elem = await article.query_selector('div.product-listing__address')
                            extracted_address = await address_elem.text_content() if address_elem else ""
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ GPT
                            is_match = await gpt_check_product_match(query.name, product_name, company_name, list(found_companies), client)
                            logger.info(f"[GPT-CHECK] '{product_name}' (—Ü–µ–Ω–∞: '{price}', –∫–æ–º–ø–∞–Ω–∏—è: '{company_name}') <==> '{query.name}' ‚Üí –û—Ç–≤–µ—Ç: {is_match}")
                            
                            if is_match == "–¥–∞":
                                if company_name not in found_companies:
                                    logger.info(f"[ADD-COMPANY] –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é: '{company_name}' (–Ω–∞–π–¥–µ–Ω–æ: {len(found_companies)})")
                                    found_companies.append(company_name)
                                    yes_company_names.append(company_name)
                                    yes_links.append(full_link)
                                    yes_product_names.append(product_name)
                                    yes_prices.append(price)
                                    yes_currencies.append(currency.strip())
                                    yes_addresses.append(extracted_address)
                                    yes_phones.append("")
                                    found_count = len(found_companies)
                                    logger.info(f"[ADD-COMPANY] –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {found_count}")
                                    if found_count >= cards_to_parse:
                                        stop_search = True
                                        break
                                else:
                                    logger.info(f"[SKIP-DUPLICATE] –ö–æ–º–ø–∞–Ω–∏—è '{company_name}' —É–∂–µ –Ω–∞–π–¥–µ–Ω–∞. –°–ø–∏—Å–æ–∫: {found_companies}")
                            else:
                                logger.info(f"[FILTER] –ü—Ä–æ–ø—É—Å–∫: GPT –æ—Ç–≤–µ—Ç–∏–ª '{is_match}' –¥–ª—è '{product_name}'")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
                            continue
                    
                    if found_count >= cards_to_parse:
                        break
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    page_num += 1
                    if page_num > MAX_PAGES:
                        logger.info(f"[PULSCEN] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ({MAX_PAGES}). –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Perplexity, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {cards_to_parse} —Ç–æ–≤–∞—Ä–∞.")
                        break
                    
                    logger.info(f"[PULSCEN] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}")
                    next_page_elem = await page.query_selector(f'a.pagination__link.js-ga-link:text("{page_num}")')
                    if not next_page_elem:
                        logger.info(f"[PULSCEN] –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫.")
                        break
                    next_page_url = await next_page_elem.get_attribute('href')
                    if not next_page_url:
                        logger.info(f"[PULSCEN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫.")
                        break
                    if next_page_url.startswith('http'):
                        await page.goto(next_page_url, timeout=PAGE_TIMEOUT)
                    else:
                        await page.goto(f"https://www.pulscen.ru{next_page_url}", timeout=PAGE_TIMEOUT)

                # –ó–∞–º–µ–Ω–∞ –Ω–∞ Perplexity –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not yes_company_names or len(yes_company_names) < cards_to_parse:
                    needed = cards_to_parse - len(yes_company_names)
                    logger.info(f"[PULSCEN] –ù–µ –Ω–∞–π–¥–µ–Ω–æ {needed} –∫–∞—Ä—Ç–æ—á–µ–∫, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ Perplexity!")
                    try:
                        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Pulscen –Ω–∞ Perplexity (3 —Ç–æ–≤–∞—Ä–∞)
                        perplexity_results = []
                        failed_urls = []  # –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö URL –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                        failed_domains = set()  # –ù–∞–±–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
                        attempts = 0
                        max_attempts = 10
                        
                        logger.info(f"[PERPLEXITY-START] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å –º–∞–∫—Å–∏–º—É–º {max_attempts} –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 3 —Ç–æ–≤–∞—Ä–æ–≤")
                        
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º 3 —Ç–æ–≤–∞—Ä–∞
                        while len(perplexity_results) < 3 and attempts < max_attempts:
                            attempts += 1
                            logger.info(f"[PERPLEXITY] –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{max_attempts}: –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Perplexity")
                            logger.info(f"[PERPLEXITY] –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {len(perplexity_results)}/3 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
                            
                            # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ failed_urls –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                            current_results = await perplexity_search_product_cards(query.name, count=3, attempt=attempts, exclude_urls=failed_urls)
                            
                            logger.info(f"[PERPLEXITY] –ü–æ–ª—É—á–µ–Ω–æ {len(current_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç Perplexity –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempts}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                            existing_companies = [item["company"].replace("¬´", "\"").replace("¬ª", "\"").strip() for item in perplexity_results]
                            existing_urls = [item["url"] for item in perplexity_results]
                            
                            for i, item in enumerate(current_results):
                                normalized_company = item["company"].replace("¬´", "\"").replace("¬ª", "\"").strip()
                                item_domain = item["url"].split('/')[2] if item["url"].startswith('http') else item["url"]
                                
                                logger.info(f"[PERPLEXITY] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä {i+1}: {item['company']} | {item_domain}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –¥–æ–º–µ–Ω
                                if item_domain in failed_domains:
                                    logger.warning(f"[PERPLEXITY] üö´ –î–æ–º–µ–Ω {item_domain} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                    continue
                                    
                                if normalized_company not in existing_companies and item["url"] not in existing_urls and len(perplexity_results) < 3:
                                    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                                    logger.info(f"[PERPLEXITY] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL: {item['url']}")
                                    url_valid = await validate_url(item["url"])
                                    if url_valid:
                                        perplexity_results.append(item)
                                        logger.info(f"[PERPLEXITY] ‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–≤–∞—Ä {len(perplexity_results)}/3: {item['company']} | {item['name']}")
                                    else:
                                        logger.warning(f"[PERPLEXITY] ‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {item['url']} | {item['company']}")
                                        failed_urls.append(item['url'])  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö URL
                                        failed_domains.add(item_domain)  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                                        logger.info(f"[PERPLEXITY] üìù –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–æ–º–µ–Ω: {item_domain} (–≤—Å–µ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {len(failed_domains)})")
                                else:
                                    if normalized_company in existing_companies:
                                        logger.info(f"[PERPLEXITY] üîÑ –ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {normalized_company}")
                                    elif item["url"] in existing_urls:
                                        logger.info(f"[PERPLEXITY] üîÑ –ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª—è URL: {item['url']}")
                                    elif len(perplexity_results) >= 3:
                                        logger.info(f"[PERPLEXITY] ‚èπÔ∏è –£–∂–µ –Ω–∞–π–¥–µ–Ω–æ 3 —Ç–æ–≤–∞—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ")
                            
                            if len(perplexity_results) < 3:
                                logger.warning(f"[PERPLEXITY] –ü–æ–ø—ã—Ç–∫–∞ {attempts}: –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(perplexity_results)} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 3")
                                logger.info(f"[PERPLEXITY] –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(failed_domains)}, –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö URL: {len(failed_urls)}")
                                # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                        
                        if len(perplexity_results) < 3:
                            logger.error(f"[PERPLEXITY] –ü–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(perplexity_results)} —Ç–æ–≤–∞—Ä–æ–≤")
                        
                        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Pulscen –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Perplexity
                        yes_company_names, yes_links, yes_product_names, yes_prices, yes_currencies, yes_addresses, yes_phones = [], [], [], [], [], [], []
                        for item in perplexity_results[:3]:  # –°—Ç—Ä–æ–≥–æ –¥–æ 3 —Ç–æ–≤–∞—Ä–æ–≤
                            yes_company_names.append(item["company"])
                            yes_links.append(item["url"])
                            yes_product_names.append(item["name"])
                            yes_prices.append(item["price"])
                            yes_currencies.append("")
                            yes_addresses.append(item["address"])
                            yes_phones.append(item["phone"])
                            logger.info(f"[PERPLEXITY] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞: {item['company']} | {item['name']}")
                    except Exception as e:
                        logger.error(f"[PERPLEXITY] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ Perplexity: {e}")

                dates = await extract_dates_from_main_page(page)
                results = []

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                logger.info(f"[RESULTS-DEBUG] –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(yes_company_names)}")
                logger.info(f"[RESULTS-DEBUG] –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(yes_links)}")
                for debug_idx, debug_link in enumerate(yes_links):
                    logger.info(f"[RESULTS-DEBUG] Link {debug_idx}: '{debug_link}' | Company: '{yes_company_names[debug_idx] if debug_idx < len(yes_company_names) else 'N/A'}'")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                current_year, current_quarter = get_current_year_quarter()
                
                for idx, link in enumerate(yes_links):
                    await asyncio.sleep(0)
                    
                    logger.info(f"[PROCESSING] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {idx+1}/{len(yes_links)}: {link}")
                    pdf_filename = "–Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
                    if not link:
                        logger.warning(f"[PROCESSING] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä {idx+1} - –ø—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞")
                        continue

                    product_page = await context.new_page()
                    seller_page = None
                    company_data = {
                        "company_n": "–Ω–µ —É–∫–∞–∑–∞–Ω",
                        "email": "–Ω–µ —É–∫–∞–∑–∞–Ω",
                        "inn": "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "kpp": "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "phone": "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "address": "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                        "formula": "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                    }
                    
                    try:
                        await product_page.goto(link, wait_until="domcontentloaded", timeout=PRODUCT_PAGE_TIMEOUT)

                        company_name = yes_company_names[idx].replace('\n', ' ').strip() if isinstance(yes_company_names[idx], str) else yes_company_names[idx]
                        material_name = yes_product_names[idx].replace('\n', ' ').strip() if isinstance(yes_product_names[idx], str) else yes_product_names[idx]
                        price_info = {
                            "price": yes_prices[idx],
                            "currency": yes_currencies[idx]
                        }
                        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

                        phone_number = await extract_phone_number(product_page)

                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ
                        try:
                            delivery_elem = await product_page.query_selector("div.product-deliveries__name")
                            delivery_method = await delivery_elem.inner_text() if delivery_elem else ""
                            if isinstance(delivery_method, str):
                                delivery_method = delivery_method.replace('\n', ' ').strip()
                        except Exception:
                            delivery_method = ""

                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
                        try:
                            address_elem = await product_page.query_selector("div.footer-bottom__address")
                            raw_address = await address_elem.inner_text() if address_elem else ""

                            phone_pattern = r'(?:\\+7|8|7)[\\s\\-\\(\\)]*\\d{3}[\\s\\-\\(\\)]*\\d{3}[\\s\\-\\(\\)]*\\d{2}[\\s\\-\\(\\)]*\\d{2}'
                            phone_match = re.search(phone_pattern, raw_address)
                            if phone_match:
                                address_part = raw_address[:phone_match.start()]
                            else:
                                address_part = raw_address

                            pattern = r"(–≥\\.|–≥–æ—Ä–æ–¥|–ø–æ—Å\\.|–ø–≥—Ç|–¥–µ—Ä–µ–≤–Ω—è|—Å–µ–ª–æ)[^+]{10,1000}"
                            match = re.search(pattern, address_part, flags=re.IGNORECASE)
                            if match:
                                extracted_address = match.group(0).strip()
                                extracted_address = re.sub(r"[\\s,;]+$", "", extracted_address)
                                STOP_WORDS = [
                                    "–≤—ä–µ–∑–¥", "–ø–æ–¥—ä–µ–∑–¥", "–≤—ã–µ–∑–¥", "–ø—Ä–æ–µ–∑–¥", "–ø–µ—Ä–µ–µ–∑–¥", "–æ–±—ä–µ–∑–¥", "–ø—Ä–∏–µ–∑–¥",
                                    "–≤—ä–µ–∑–∂–∞—è", "–≤—ã–µ–∑–∂–∞—é—â–∏–π", "–æ–±—ä–µ–∑–∂–∞—é—â–∏–π", "–ø—Ä–æ–µ–∑–∂–∞—é—â–∏–π", "–ø–µ—Ä–µ–µ–∑–∂–∞—é—â–∏–π"
                                ]
                                for word in STOP_WORDS:
                                    extracted_address = re.sub(rf"\\b{word}\\b.*", "", extracted_address, flags=re.IGNORECASE)
                                extracted_address = re.sub(r"[\\s,;]+$", "", extracted_address)
                                if not extracted_address.strip():
                                    extracted_address = "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                            else:
                                extracted_address = ""
                        except Exception:
                            extracted_address = "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

                        # –ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞
                        try:
                            characteristics = {}
                            char_block = await product_page.query_selector('div.product-tabber__body.js-product-tabber-content')
                            if char_block:
                                logger.info("[CHAR] –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞, –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
                                items = await char_block.query_selector_all('div.product-description-list__item')
                                for item in items:
                                    label_elem = await item.query_selector('span.product-description-list__label')
                                    value_elem = await item.query_selector('span.product-description-list__value')
                                    if label_elem and value_elem:
                                        label = (await label_elem.inner_text()).strip()
                                        value_texts = []
                                        for node in await value_elem.query_selector_all('a, span, text()'):
                                            try:
                                                txt = await node.inner_text()
                                                if txt:
                                                    value_texts.append(txt.strip())
                                            except Exception:
                                                pass
                                        if not value_texts:
                                            value_texts = [(await value_elem.inner_text()).strip()]
                                        value = ", ".join(value_texts)
                                        characteristics[label] = value
                                        logger.info(f"[CHAR] {label}: {value}")
                            else:
                                logger.info("[CHAR] –ë–ª–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                            
                            # –ü–∞—Ä—Å–∏–Ω–≥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                            try:
                                descr_block = await product_page.query_selector('div.product-tabber__body.js-product-tabber-content#tab-description div.product-description.js-apb-descr')
                                if descr_block:
                                    paragraphs = await descr_block.query_selector_all('p')
                                    description_texts = []
                                    for p in paragraphs:
                                        txt = await p.inner_text()
                                        if txt:
                                            description_texts.append(txt.strip())
                                    description = ' '.join(description_texts)
                                    words = description.split()
                                    if len(words) > 70:
                                        description = ' '.join(words[:70]) + '...'
                                    characteristics['–û–ø–∏—Å–∞–Ω–∏–µ'] = description
                                    logger.info(f"[CHAR] –û–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 70 —Å–ª–æ–≤): {description[:200]}...")
                                else:
                                    logger.info("[CHAR] –ë–ª–æ–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                            except Exception as e:
                                logger.warning(f"[CHAR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
                        except Exception as e:
                            logger.warning(f"[CHAR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")

                        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–π—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
                        try:
                            seller_site_elem = await product_page.query_selector("a.js-ykr-action")
                            seller_site = await seller_site_elem.get_attribute("href") if seller_site_elem else ""
                        except Exception:
                            seller_site = ""
                        
                        if not seller_site:
                            seller_site = link
                        
                        date = get_current_date()
                        logger.info(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ seller_site: {seller_site}")
                        
                        if seller_site and seller_site.startswith(("http://", "https://")):
                            seller_page = await context.new_page()
                            
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä viewport –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            await seller_page.set_viewport_size({"width": 1920, "height": 1080})
                            
                            try:
                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                                seller_page.on("console", lambda msg: logger.debug(f"Console: {msg.text}"))
                                
                                await seller_page.goto(seller_site, timeout=SELLER_PAGE_TIMEOUT, wait_until='domcontentloaded')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                                try:
                                    # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                    await asyncio.sleep(2)
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                                    page_url = seller_page.url
                                    if page_url and not seller_page.is_closed():
                                        logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞: {page_url}")
                                    else:
                                        raise Exception("Page context is destroyed or closed")
                                        
                                except Exception as stability_error:
                                    logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {seller_site}: {stability_error}")
                                    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                                    try:
                                        await seller_page.reload(timeout=10000, wait_until='domcontentloaded')
                                        await asyncio.sleep(2)
                                        logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞: {seller_site}")
                                    except Exception as reload_error:
                                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {reload_error}")
                                        raise reload_error
                                        
                            except Exception as goto_error:
                                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {seller_site}: {goto_error}")
                                seller_page = None
                            
                            if seller_page and not seller_page.is_closed():
                                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                                try:
                                    page_text = await seller_page.evaluate("() => document.body.textContent")
                                    description = characteristics.get('–û–ø–∏—Å–∞–Ω–∏–µ', '') if characteristics else ''
                                except Exception as text_error:
                                    logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥–∞–≤—Ü–∞: {text_error}")
                                    page_text = ""
                                    description = characteristics.get('–û–ø–∏—Å–∞–Ω–∏–µ', '') if characteristics else ''
                            else:
                                logger.warning(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                                page_text = ""
                                description = characteristics.get('–û–ø–∏—Å–∞–Ω–∏–µ', '') if characteristics else ''
                            
                            company_data = await extract_company_data(
                                page_text=page_text,
                                extracted_address=extracted_address,
                                target_unit=query.weight,
                                product_url=seller_site,
                                phone_number=phone_number,
                                company_name=company_name,
                                material_name=material_name,
                                price_info=price_info,
                                kg=query.name,
                                characteristics=characteristics,
                                description=description,
                                client=client
                            )

                            # –°–æ–∑–¥–∞–Ω–∏–µ PDF
                            try:
                                top_path = f"{out_dir}/top_screen_{idx+1}.png"
                                bottom_path = f"{out_dir}/bottom_screen_{idx+1}.png"

                                if seller_page and not seller_page.is_closed():
                                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                    await asyncio.sleep(3)
                                    
                                    try:
                                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                                        page_title = await seller_page.title()
                                        page_url = seller_page.url
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º viewport
                                        viewport = seller_page.viewport_size
                                        logger.info(f"Viewport: {viewport}")
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                                        ready_state = await seller_page.evaluate("() => document.readyState")
                                        if ready_state != "complete":
                                            logger.warning(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: readyState = {ready_state}")
                                            await seller_page.wait_for_load_state("load", timeout=5000)
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                                        body_height = await seller_page.evaluate("() => document.body.scrollHeight")
                                        visible_elements = await seller_page.evaluate("""() => {
                                            const visibleElements = [];
                                            const elements = document.querySelectorAll('*');
                                            for (let i = 0; i < Math.min(elements.length, 10); i++) {
                                                const el = elements[i];
                                                const rect = el.getBoundingClientRect();
                                                if (rect.width > 0 && rect.height > 0) {
                                                    visibleElements.push({
                                                        tag: el.tagName,
                                                        width: rect.width,
                                                        height: rect.height,
                                                        text: el.textContent?.substring(0, 50)
                                                    });
                                                }
                                            }
                                            return visibleElements;
                                        }""")
                                        
                                        logger.info(f"–ì–æ—Ç–æ–≤ –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É. Title: '{page_title}', URL: {page_url}, readyState: {ready_state}")
                                        logger.info(f"Body height: {body_height}, Visible elements: {len(visible_elements)}")
                                        
                                        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∂–¥–µ–º –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è
                                        if len(visible_elements) < 3 or body_height < 100:
                                            logger.warning("–ú–∞–ª–æ –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –º–∞–ª–µ–Ω—å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                                            try:
                                                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                                                await seller_page.wait_for_selector("body", timeout=3000)
                                                await asyncio.sleep(2)
                                                
                                                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                                                await seller_page.evaluate("""() => {
                                                    window.scrollTo(0, 100);
                                                    window.scrollTo(0, 0);
                                                }""")
                                                await asyncio.sleep(1)
                                                
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                                                new_body_height = await seller_page.evaluate("() => document.body.scrollHeight")
                                                logger.info(f"–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {new_body_height}")
                                                
                                            except Exception as wait_error:
                                                logger.warning(f"–í–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å: {wait_error}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º")
                                        
                                        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö –ø–µ—Ä–µ–¥ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
                                        await seller_page.evaluate("() => window.scrollTo(0, 0)")
                                        await asyncio.sleep(2)
                                        
                                        logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ Playwright")
                                        
                                        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º full_page=True
                                        final_body_height = await seller_page.evaluate("() => document.body.scrollHeight")
                                        if final_body_height < 200:
                                            logger.warning("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
                                            await seller_page.screenshot(path=top_path, full_page=True, timeout=10000)
                                        else:
                                            # –û–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∑–∞–¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç—å—é
                                            await seller_page.screenshot(
                                                path=top_path, 
                                                full_page=False,
                                                clip={"x": 0, "y": 0, "width": 1920, "height": 600},
                                                timeout=10000
                                            )
                                        
                                    except Exception as screenshot_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥–∞–≤—Ü–∞: {screenshot_error}")
                                        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥–∞–≤—Ü–∞")
                                        await product_page.evaluate("() => window.scrollTo(0, 0)")
                                        await asyncio.sleep(1)
                                        await product_page.screenshot(path=top_path, full_page=False)
                                else:
                                    logger.warning("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                                    await product_page.evaluate("() => window.scrollTo(0, 0)")
                                    await asyncio.sleep(1)
                                    await product_page.screenshot(path=top_path, full_page=False)
                                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {top_path}: {os.path.exists(top_path)}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(top_path) if os.path.exists(top_path) else 0}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç (8511 –±–∞–π—Ç = —Ç–∏–ø–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
                                if os.path.exists(top_path) and os.path.getsize(top_path) <= 10000:
                                    logger.warning(f"–í–µ—Ä—Ö–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π ({os.path.getsize(top_path)} –±–∞–π—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                                    try:
                                        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                                        os.remove(top_path)
                                        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                        await product_page.evaluate("() => window.scrollTo(0, 0)")
                                        await asyncio.sleep(1)
                                        await product_page.screenshot(path=top_path, full_page=False)
                                        logger.info(f"Fallback —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(top_path)} –±–∞–π—Ç")
                                    except Exception as fallback_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {fallback_error}")

                                time.sleep(2)

                                if seller_page and not seller_page.is_closed():
                                    try:
                                        logger.info("–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ –Ω–∏–∑–∞")
                                        page_height = await seller_page.evaluate("() => document.body.scrollHeight")
                                        viewport_height = 600
                                        
                                        if page_height > viewport_height:
                                            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                                            await seller_page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                                            await asyncio.sleep(2)
                                            
                                            logger.info("–°–∫—Ä–∏–Ω—à–æ—Ç –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ Playwright")
                                            await seller_page.screenshot(
                                                path=bottom_path, 
                                                full_page=False,
                                                clip={"x": 0, "y": max(0, page_height - viewport_height), "width": 1920, "height": viewport_height},
                                                timeout=10000
                                            )
                                        else:
                                            # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä–æ—Ç–∫–∞—è, –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Å–µ—Ä–µ–¥–∏–Ω—ã
                                            logger.warning("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ—Ä–æ—Ç–∫–∞—è, —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Å–µ—Ä–µ–¥–∏–Ω—ã")
                                            await seller_page.evaluate("window.scrollTo(0, 0)")
                                            await asyncio.sleep(1)
                                            await seller_page.screenshot(path=bottom_path, full_page=True, timeout=10000)
                                        
                                    except Exception as bottom_screenshot_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∏–∂–Ω–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥–∞–≤—Ü–∞: {bottom_screenshot_error}")
                                        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∂–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                                        await product_page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                                        await asyncio.sleep(2)
                                        await product_page.screenshot(path=bottom_path, full_page=False)
                                else:
                                    logger.warning("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∏–∑)")
                                    await product_page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                                    await asyncio.sleep(2)
                                    await product_page.screenshot(path=bottom_path, full_page=False)
                                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {bottom_path}: {os.path.exists(bottom_path)}, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(bottom_path) if os.path.exists(bottom_path) else 0}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –Ω–∏–∂–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                                if os.path.exists(bottom_path) and os.path.getsize(bottom_path) <= 10000:
                                    logger.warning(f"–ù–∏–∂–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π ({os.path.getsize(bottom_path)} –±–∞–π—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                                    try:
                                        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
                                        os.remove(bottom_path)
                                        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
                                        await product_page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                                        await asyncio.sleep(2)
                                        await product_page.screenshot(path=bottom_path, full_page=False)
                                        logger.info(f"Fallback –Ω–∏–∂–Ω–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {os.path.getsize(bottom_path)} –±–∞–π—Ç")
                                    except Exception as fallback_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –Ω–∏–∂–Ω–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {fallback_error}")

                                logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {idx+1}")
                                pdf_filename = f"{code}_{idx+1}_{current_year}_{current_quarter}.pdf"
                                pdf_path = os.path.join(out_dir, pdf_filename)
                                
                                create_pdf_with_fpdf(
                                    top_path=top_path,
                                    bottom_path=bottom_path,
                                    output_path=pdf_path,
                                    seller_site=seller_site,
                                    company_name=company_name,
                                    material_name=material_name,
                                    company_data=company_data,
                                    query=query,
                                    price_info=price_info,
                                    phone_number=phone_number,
                                    date=date,
                                    delivery_method=delivery_method,
                                    extracted_address=extracted_address,
                                    monitor=query.monitor
                                )
                                logger.info(f"PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {pdf_path}")
                                
                                # OCR + GPT –æ–±—Ä–∞–±–æ—Ç–∫–∞
                                try:
                                    top_text = extract_text_from_image(top_path)
                                    bottom_text = extract_text_from_image(bottom_path)
                                    full_text = top_text + '\n' + bottom_text
                                    
                                    if full_text.strip():
                                        gpt_result_json = await gpt_extract_data_from_screenshot(full_text)
                                        gpt_data = json.loads(gpt_result_json)
                                        if not company_name or company_name == "–Ω–µ —É–∫–∞–∑–∞–Ω–æ":
                                            company_name = gpt_data.get('company', company_name)
                                        if (not phone_number or phone_number == "–ù–æ–º–µ—Ä –Ω–∞ —Å–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç") and gpt_data.get('phone') and gpt_data.get('phone') != "–ù–æ–º–µ—Ä –Ω–∞ —Å–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç":
                                            phone_number = gpt_data.get('phone', phone_number)
                                        if not price or price == "":
                                            price = gpt_data.get('price', price)
                                        if not extracted_address or extracted_address == "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ":
                                            extracted_address = gpt_data.get('address', extracted_address)
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ OCR/GPT –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                                
                                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                                finally:
                                    for file_path in [top_path, bottom_path]:
                                        try:
                                            if os.path.exists(file_path):
                                                os.remove(file_path)
                                                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                                        except Exception as e:
                                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")

                            except Exception as e:
                                logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {seller_site}: {e}")
                                pdf_filename = "–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                            finally:
                                if seller_page and not seller_page.is_closed():
                                    await seller_page.close()
                                logger.info(f"PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {pdf_filename}")

                        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        results.append({
                            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è": company_data['email'],
                            "–ò–ù–ù –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞/ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è": company_data['inn'],
                            "–ö–ü–ü": company_data['kpp'],
                            "–§–æ—Ä–º—É–ª–∞": company_data['formula'],
                            "url": link,
                            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞/ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è": company_data['company_n'],
                            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ –ø—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç—É": material_name.strip() if isinstance(material_name, str) else material_name,
                            "–¶–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Å –ù–î–°, —Ä—É–±.": f"{price_info['price']} {price_info['currency']}",
                            "–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è": phone_number,
                            "delivery_method": delivery_method if delivery_method else "–°–∞–º–æ–≤—ã–∑–æ–≤",
                            "–ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è/—Å–∫–ª–∞–¥–∞ (–º–µ—Å—Ç–æ –æ—Ç–≥—Ä—É–∑–∫–∏)": company_data['address'],
                            "–ê–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-—Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ ¬´–ò–Ω—Ç–µ—Ä–Ω–µ—Ç¬ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è": seller_site,
                            "–¶–µ–Ω–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –¥–∞—Ç—É": date,
                            "–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç": f"{code}_{idx+1}_{current_year}_{current_quarter}.pdf",
                            "–ò–Ω–¥–µ–∫—Å": str(int_number + idx),
                            "note": "–î–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—á–Ω–æ –∏–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" if any([
                                not company_name,
                                not material_name,
                                not price_info['price']
                            ]) else "OK"
                        })

                    except Exception as e:
                        error_msg = str(e)
                        logger.error(f"Error processing {link}: {error_msg}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ - –µ—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–µ —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                        if any(err in error_msg for err in [
                            "ERR_CONNECTION_REFUSED", "ERR_NAME_NOT_RESOLVED", 
                            "ERR_SSL_PROTOCOL_ERROR", "ERR_NETWORK_CHANGED",
                            "ERR_INTERNET_DISCONNECTED", "ERR_CONNECTION_TIMED_OUT"
                        ]):
                            logger.warning(f"[SKIP] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä {idx+1} –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: {link}")
                            results.append({"url": link, "error": error_msg, "skipped": True})
                        else:
                            # –¢–æ–ª—å–∫–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                            try:
                                await product_page.screenshot(path=f"{out_dir}/error_{idx+1}.png")
                                logger.info(f"[DEBUG] –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏: error_{idx+1}.png")
                            except:
                                logger.warning(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è error_{idx+1}")
                            results.append({"url": link, "error": error_msg})
                    finally:
                        try:
                            if 'product_page' in locals() and not product_page.is_closed():
                                await product_page.close()
                            if 'seller_page' in locals() and not seller_page.is_closed():
                                await seller_page.close()
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤
                    if idx < len(yes_links) - 1:
                        await asyncio.sleep(2)
                        logger.info(f"[PROCESSING] –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–æ–≤–∞—Ä–æ–º")

                # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"json/results_{timestamp}.json"
                with open(filename, "w", encoding="utf-8") as f:
                    json.dump(results, f, ensure_ascii=False, indent=2)

                # –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                logger.info(f"[FINAL] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")
                return {"results": results}

            except Exception as e:
                logger.error(f"Error in main processing: {str(e)}")
                raise
            finally:
                # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
                try:
                    if 'page' in locals() and not page.is_closed():
                        await page.close()
                    if 'context' in locals():
                        await context.close()
                    if 'browser' in locals():
                        await browser.close()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    except Exception as e:
        logger.error(f"Error in collect_offers: {str(e)}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Pulscen Parser API —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    print("üì∏ –ó–∞–ø—É—Å–∫–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞...")
    screenshot_thread = threading.Thread(target=auto_screenshot_system, daemon=True)
    screenshot_thread.start()
    
    print("üåê –ó–∞–ø—É—Å–∫–∞—é –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:8000")
    print("üì± –°–∞–π—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("‚è∞ –í—Ä–µ–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    uvicorn.run(app, host="0.0.0.0", port=8000) 